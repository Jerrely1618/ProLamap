{
  "python": {
    "color": "#F0A8D0",
    "PEP8": {
      "Principals": [
        {
          "type": "title",
          "content": "Principles of Python Coding Style"
        },
        {
          "type": "text",
          "content": "After reading this guide, you will know how to write clean and maintainable Python code. But before that, let's understand why it is important to follow a coding style guide. The priciples that will come up over and over on the PEP8 guidelines and that every good pythoners follows. They are:"
        },
        {
          "type": "text",
          "content": "- Readability\n- Consistency\n- Maintainability"
        },
        {
          "type": "title",
          "content": "Readability"
        },
        {
          "type": "text",
          "content": "Keeping things clear and easy to read is one of the most important aspect of writing code, and python syntax provides generous ways of keeping that true."
        },
        {
          "type": "code",
          "content": "# Shorter lines improves readability\napples, pears, oranges, bananas,\\\n peaches, coconuts, tomatoes = 1, 2, 3, 4, 5, 6, 7"
        },
        {
          "type": "title",
          "content": "Consistency"
        },
        {
          "type": "text",
          "content": "While coding in a team, it is important to keep our code consitent making it easier to read and the codebase organized."
        },
        {
          "type": "code",
          "content": "#Consistency of using tabs or spaces\n# Using tabs\ndef example_function():\n\tif True:\n\t\tprint('This is tab indented')\n\n# Using spaces\ndef another_function():\n    if True:\n        print('This is space indented')"
        },
        {
          "type": "title",
          "content": "Maintainability"
        },
        {
          "type": "text",
          "content": "In order to expand, maintining the codebase is crucial. By setting a correct foundating with the help of syntax we are able to make future work easier on us."
        },
        {
          "type": "code",
          "content": "# Function with single responsabilities\ndef calculate_rectangle_area(length, width):\n    return length * width\n\ndef calculate_circle_area(radius):\n    return 3.14 * radius ** 2\n\n# Main function\nif __name__ == '__main__':\n    print('Rectangle area:', calculate_rectangle_area(5, 10))\n    print('Circle area:', calculate_circle_area(7))"
        },
        {
          "type": "title",
          "content": "Video"
        },
        {
          "type": "video",
          "content": "https://www.youtube.com/watch?v=wKECxtmbvYQ"
        }
      ],
      "Line Length": [
        {
          "type": "title",
          "content": "Limit Length"
        },
        {
          "type": "text",
          "content": "By default, the maximum number of characters you can have in a line is **79**.\n"
        },
        {
          "type": "code",
          "content": "# Default max length 79 characters:\nprint(\"I'll be back.\")  # A classic line from 'The Terminator.'"
        },
        {
          "type": "text",
          "content": "This can increase up to **99 characters** when a team agrees on it."
        },
        {
          "type": "code",
          "content": "# Max length 99 characters:\nprint(\"Here's looking at you, kid.\")  # A quote from 'Casablanca.'"
        },
        {
          "type": "text",
          "content": "For comments and docstrings, the maximum character limit is **72 characters**."
        },
        {
          "type": "code",
          "content": "# Comments/Docstrings 72 characters:\n# Life is like a box of chocolates; you never know what you get."
        },
        {
          "type": "title",
          "content": "Line Breaks"
        },
        {
          "type": "text",
          "content": "A way to solve the line length problem is to use **backslashes or parentheses** to break lines. There are more ways to do so, but these are the most common ones. The other ones are described in the other titles."
        },
        {
          "type": "code",
          "content": "# Using Backslashes\napples, pears, oranges, bananas, \\\n peaches, coconuts, tomatoes = 1, 2, 3, 4, 5, 6, 7\n\n# Using Parentheses\n(apples, pears, oranges, bananas, \n peaches, coconuts, tomatoes) = 1, 2, 3, 4, 5, 6, 7"
        }
      ],
      "Comments": [
        {
          "type": "title",
          "content": "Comments"
        },
        {
          "type": "text",
          "content": "Comments in python like in any other language helps document your code. #s in this case are your primary friend when making comments since its how they start.\n\n\n The comments should be clear and concise, for anyone to understand and of course in english so anyone in the worldwide community of coders can understand it."
        },
        {
          "type": "code",
          "content": "# Inline comments\n left = right + 1 # Closing the window"
        },
        {
          "type": "info",
          "title": "Useful comments",
          "content": "While having comments is great for documentation, overusing them or using them incorrectly can be **worse** than not having code.\n\n For that reason, currently the best way to document your code is by **naming and defining** functions and variables for what they do instead of arbitery names."
        },
        {
          "type": "title",
          "content": "Docstrings"
        },
        {
          "type": "text",
          "content": "Docstrings are the **official** way to document our code. We can use either **\"\"\"** or **'''** to create them."
        },
        {
          "type": "code",
          "content": "\"\"\"\nA string representing two numbers added together.\n\nParameters:\n    expression (str): (e.g., '2 + 3').\nReturns:\n    float: The addition of the two numbers.\n\"\"\"\ndef string_to_addition(expression: str) -> float:\n    num1, num2 = map(float, expression.split('+'))\n    return num1 + num2"
        }
      ],
      "Naming Conventions": [
        {
          "type": "title",
          "content": "Naming Conventions"
        },
        {
          "type": "text",
          "content": "The best way to document your code will always be throught the names you gives to your variables, functions, and classes. They are best when they are **descriptive** and below are a few examples of how to name them."
        },
        {
          "type": "code",
          "content": "# Underscore:\nuser_age = 2\n\n# Camel case:\nuserAge = 2"
        },
        {
          "type": "info",
          "title": "Underscore or Camel Case",
          "content": "As stated at the begging of this guide, **consistency** is key when writing code. So, it is about **sticking** with your choice wether it's camel case or underscore, keep it consistent throught your codebase."
        },
        {
          "type": "title",
          "content": "Functions:"
        },
        {
          "type": "code",
          "content": "# Naming functions:\ndef calculate_area(radius):\n    return 3.14 * radius ** 2\n\n# Bad naming for functions:\ndef func1(r):\n    return 3.14 * r ** 2"
        },
        {
          "type": "title",
          "content": "Variables:"
        },
        {
          "type": "code",
          "content": "# Naming variables:\nuser_age = 25\n\n# Bad naming for variables:\nx = 25"
        },
        {
          "type": "title",
          "content": "Classes:"
        },
        {
          "type": "code",
          "content": "# Naming classes:\nclass Dog:\n    def bark(self):\n        return \"Woof!\"\n\n# Bad naming for classes:\nclass A:\n    def b(self):\n        return \"Woof!\""
        }
      ],
      "Imports": [
        {
          "type": "text",
          "content": "Imports should usually be on separate lines."
        }
      ],
      "Blank Lines": [
        {
          "type": "text",
          "content": "Use blank lines to separate functions and classes."
        }
      ],
      "Indentation": [
        {
          "type": "text",
          "content": "Use 4 spaces per indentation level."
        }
      ],
      "Whitespace in Expressions": [
        {
          "type": "text",
          "content": "Avoid extraneous whitespace in expressions and statements."
        }
      ],
      "Functions Formatting": [
        {
          "type": "text",
          "content": "Use a consistent style for defining functions."
        }
      ]
    },
    "Basics": {
      "Data Types": [],
      "Scope": [],
      "Operations": [],
      "Comparison": [],
      "Control Flow": []
    },
    "Functions": {
      "General": [],
      "Intitialization": [],
      "Args & Kwargs": [],
      "Keywords": [],
      "Decorators": [],
      "Closures": [],
      "Annotations": []
    },
    "Trees": {
      "General": [],
      "Traversals": [],
      "Red-Black Tree": [],
      "AVL Tree": [],
      "Binary Tree": [],
      "N-ary Tree": [],
      "Balanced Tree": []
    },
    "Tries": {
      "General": []
    },
    "Classes": {
      "General": [],
      "Constructor": [],
      "Variables": [],
      "Methods": [],
      "Decorators": [],
      "Magic Methods": []
    },
    "Recursion": {
      "General": [],
      "To Iteration": [],
      "Stack": []
    },
    "Typing": {
      "Optional": [],
      "Typing": []
    },
    "Algorithms": {
      "Binary Search": [],
      "Dijiikstra": [],
      "Cycle Detection": [],
      "Fast and Slow Pointers": [],
      "Topological Sort": [],
      "Prism's Algorithm": [],
      "Kruskal's Algorithm": []
    },
    "Exception Handling": {
      "General": [],
      "Common/Built-in": [],
      "Custom": []
    },
    "Common Libraries": {
      "Numpy": [],
      "Pandas": [],
      "Matplotlib": [],
      "Requests": [],
      "OpenCV": [],
      "Scikit-learn": []
    },
    "Strings": {
      "General": [],
      "Methods": [],
      "Formatting": [],
      "Raw Strings": [],
      "Indexing": []
    },
    "Tuples": {
      "General": [],
      "Intitialization": [],
      "Indexing": [],
      "Operations": [],
      "Loops": [],
      "Methods": []
    },
    "Arrays": {
      "General": [],
      "Intitialization": [],
      "Sorting": [],
      "Operations": [],
      "Indexing": [],
      "Loops": [],
      "Multidimensional": [],
      "Time/Space Complexity": []
    },
    "Graphs": {
      "Matrix": [],
      "Adjeacency List": [],
      "DFS": [],
      "BFS": []
    },
    "Dictionaries": {
      "General": [],
      "Intitialization": [],
      "DefaultDict": [],
      "Indexing": [],
      "Functions": [],
      "Methods": [],
      "Loops": [],
      "Time/Space Complexity": []
    },
    "Sets": {
      "General": [],
      "Intitialization": [],
      "Set Operations": [],
      "Functions": [],
      "Forzenset": [],
      "Loops": [],
      "Comparasions": [],
      "Time/Space Complexity": []
    },
    "Heaps": {
      "General": [],
      "Intitialization": [],
      "Min-Max Heap": [],
      "Operations": [],
      "Time/Space Complexity": []
    },
    "File Handling": {
      "General": [],
      "Methods": [],
      "Modes": []
    },
    "Decorators & Generators": {
      "Decorators": [],
      "Generators": [],
      "Yield": [],
      "Iterators": []
    },
    "Context Manager": {
      "General": [],
      "Contextlib": []
    },
    "Regular Expressions": {
      "General": [],
      "Methods": [],
      "Compile, groups, and Capture": [],
      "Flags": []
    },
    "Map, Filter, Reduce": {
      "General": []
    },
    "Async": {
      "General": [],
      "Cocurrent": [],
      "Exceptions": [],
      "Examples": []
    },
    "Testing": {
      "Unitttest": [],
      "Pytest": [],
      "MagicMock": []
    },
    "Lambda": {
      "General": [],
      "Examples": []
    }
  }
}